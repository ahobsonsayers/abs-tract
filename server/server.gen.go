// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Defines values for BookbeatFormat.
const (
	All       BookbeatFormat = "all"
	Audiobook BookbeatFormat = "audiobook"
	Ebook     BookbeatFormat = "ebook"
)

// Defines values for BookbeatMarket.
const (
	BookbeatMarketAt BookbeatMarket = "at"
	BookbeatMarketBe BookbeatMarket = "be"
	BookbeatMarketBg BookbeatMarket = "bg"
	BookbeatMarketCh BookbeatMarket = "ch"
	BookbeatMarketCy BookbeatMarket = "cy"
	BookbeatMarketCz BookbeatMarket = "cz"
	BookbeatMarketDe BookbeatMarket = "de"
	BookbeatMarketDk BookbeatMarket = "dk"
	BookbeatMarketEe BookbeatMarket = "ee"
	BookbeatMarketEs BookbeatMarket = "es"
	BookbeatMarketFi BookbeatMarket = "fi"
	BookbeatMarketFr BookbeatMarket = "fr"
	BookbeatMarketGr BookbeatMarket = "gr"
	BookbeatMarketHr BookbeatMarket = "hr"
	BookbeatMarketHu BookbeatMarket = "hu"
	BookbeatMarketIe BookbeatMarket = "ie"
	BookbeatMarketIt BookbeatMarket = "it"
	BookbeatMarketLt BookbeatMarket = "lt"
	BookbeatMarketLu BookbeatMarket = "lu"
	BookbeatMarketLv BookbeatMarket = "lv"
	BookbeatMarketMt BookbeatMarket = "mt"
	BookbeatMarketNl BookbeatMarket = "nl"
	BookbeatMarketNo BookbeatMarket = "no"
	BookbeatMarketPl BookbeatMarket = "pl"
	BookbeatMarketPt BookbeatMarket = "pt"
	BookbeatMarketRo BookbeatMarket = "ro"
	BookbeatMarketSe BookbeatMarket = "se"
	BookbeatMarketSi BookbeatMarket = "si"
	BookbeatMarketSk BookbeatMarket = "sk"
	BookbeatMarketUk BookbeatMarket = "uk"
)

// Defines values for SearchKindleParamsRegion.
const (
	SearchKindleParamsRegionAu SearchKindleParamsRegion = "au"
	SearchKindleParamsRegionCa SearchKindleParamsRegion = "ca"
	SearchKindleParamsRegionDe SearchKindleParamsRegion = "de"
	SearchKindleParamsRegionEs SearchKindleParamsRegion = "es"
	SearchKindleParamsRegionFr SearchKindleParamsRegion = "fr"
	SearchKindleParamsRegionIn SearchKindleParamsRegion = "in"
	SearchKindleParamsRegionIt SearchKindleParamsRegion = "it"
	SearchKindleParamsRegionJp SearchKindleParamsRegion = "jp"
	SearchKindleParamsRegionUk SearchKindleParamsRegion = "uk"
	SearchKindleParamsRegionUs SearchKindleParamsRegion = "us"
)

// BookMetadata defines model for BookMetadata.
type BookMetadata struct {
	Asin   *string `json:"asin,omitempty"`
	Author *string `json:"author,omitempty"`

	// Cover URL to the cover image
	Cover       *string `json:"cover,omitempty"`
	Description *string `json:"description,omitempty"`

	// Duration Duration in seconds
	Duration      *int              `json:"duration,omitempty"`
	Genres        *[]string         `json:"genres,omitempty"`
	Isbn          *string           `json:"isbn,omitempty"`
	Language      *string           `json:"language,omitempty"`
	Narrator      *string           `json:"narrator,omitempty"`
	PublishedYear *string           `json:"publishedYear,omitempty"`
	Publisher     *string           `json:"publisher,omitempty"`
	Series        *[]SeriesMetadata `json:"series,omitempty"`
	Subtitle      *string           `json:"subtitle,omitempty"`
	Tags          *[]string         `json:"tags,omitempty"`
	Title         string            `json:"title"`
}

// BookbeatFormat Book format type or all formats
type BookbeatFormat string

// BookbeatLanguageCodes Either "all" for all languages, or comma-separated list of valid language codes
type BookbeatLanguageCodes = string

// BookbeatMarket Market country code
type BookbeatMarket string

// SeriesMetadata defines model for SeriesMetadata.
type SeriesMetadata struct {
	Sequence *string `json:"sequence,omitempty"`
	Series   string  `json:"series"`
}

// Author defines model for author.
type Author = string

// Query defines model for query.
type Query = string

// N200 defines model for 200.
type N200 struct {
	Matches *[]BookMetadata `json:"matches,omitempty"`
}

// N400 defines model for 400.
type N400 struct {
	Error *string `json:"error,omitempty"`
}

// N401 defines model for 401.
type N401 struct {
	Error *string `json:"error,omitempty"`
}

// N500 defines model for 500.
type N500 struct {
	Error *string `json:"error,omitempty"`
}

// SearchBookbeatParams defines parameters for SearchBookbeat.
type SearchBookbeatParams struct {
	Query  Query   `form:"query" json:"query"`
	Author *Author `form:"author,omitempty" json:"author,omitempty"`
}

// SearchGoodreadsParams defines parameters for SearchGoodreads.
type SearchGoodreadsParams struct {
	Query  Query   `form:"query" json:"query"`
	Author *Author `form:"author,omitempty" json:"author,omitempty"`
}

// SearchKindleParams defines parameters for SearchKindle.
type SearchKindleParams struct {
	Query  Query   `form:"query" json:"query"`
	Author *Author `form:"author,omitempty" json:"author,omitempty"`
}

// SearchKindleParamsRegion defines parameters for SearchKindle.
type SearchKindleParamsRegion string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search for books by format and languages using bookbeat
	// (GET /bookbeat/{market}/{format}/{languages}/search)
	SearchBookbeat(w http.ResponseWriter, r *http.Request, market BookbeatMarket, format BookbeatFormat, languages BookbeatLanguageCodes, params SearchBookbeatParams)
	// Search for books using goodreads
	// (GET /goodreads/search)
	SearchGoodreads(w http.ResponseWriter, r *http.Request, params SearchGoodreadsParams)
	// Search for books using kindle
	// (GET /kindle/{region}/search)
	SearchKindle(w http.ResponseWriter, r *http.Request, region SearchKindleParamsRegion, params SearchKindleParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Search for books by format and languages using bookbeat
// (GET /bookbeat/{market}/{format}/{languages}/search)
func (_ Unimplemented) SearchBookbeat(w http.ResponseWriter, r *http.Request, market BookbeatMarket, format BookbeatFormat, languages BookbeatLanguageCodes, params SearchBookbeatParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search for books using goodreads
// (GET /goodreads/search)
func (_ Unimplemented) SearchGoodreads(w http.ResponseWriter, r *http.Request, params SearchGoodreadsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search for books using kindle
// (GET /kindle/{region}/search)
func (_ Unimplemented) SearchKindle(w http.ResponseWriter, r *http.Request, region SearchKindleParamsRegion, params SearchKindleParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SearchBookbeat operation middleware
func (siw *ServerInterfaceWrapper) SearchBookbeat(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "market" -------------
	var market BookbeatMarket

	err = runtime.BindStyledParameterWithOptions("simple", "market", chi.URLParam(r, "market"), &market, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "market", Err: err})
		return
	}

	// ------------- Path parameter "format" -------------
	var format BookbeatFormat

	err = runtime.BindStyledParameterWithOptions("simple", "format", chi.URLParam(r, "format"), &format, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "format", Err: err})
		return
	}

	// ------------- Path parameter "languages" -------------
	var languages BookbeatLanguageCodes

	err = runtime.BindStyledParameterWithOptions("simple", "languages", chi.URLParam(r, "languages"), &languages, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "languages", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchBookbeatParams

	// ------------- Required query parameter "query" -------------

	if paramValue := r.URL.Query().Get("query"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "query"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchBookbeat(w, r, market, format, languages, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchGoodreads operation middleware
func (siw *ServerInterfaceWrapper) SearchGoodreads(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchGoodreadsParams

	// ------------- Required query parameter "query" -------------

	if paramValue := r.URL.Query().Get("query"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "query"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchGoodreads(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchKindle operation middleware
func (siw *ServerInterfaceWrapper) SearchKindle(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "region" -------------
	var region SearchKindleParamsRegion

	err = runtime.BindStyledParameterWithOptions("simple", "region", chi.URLParam(r, "region"), &region, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "region", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchKindleParams

	// ------------- Required query parameter "query" -------------

	if paramValue := r.URL.Query().Get("query"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "query"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchKindle(w, r, region, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/bookbeat/{market}/{format}/{languages}/search", wrapper.SearchBookbeat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/goodreads/search", wrapper.SearchGoodreads)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/kindle/{region}/search", wrapper.SearchKindle)
	})

	return r
}

type N200JSONResponse struct {
	Matches *[]BookMetadata `json:"matches,omitempty"`
}

type N400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type N401JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type N500JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type SearchBookbeatRequestObject struct {
	Market    BookbeatMarket        `json:"market,omitempty"`
	Format    BookbeatFormat        `json:"format"`
	Languages BookbeatLanguageCodes `json:"languages"`
	Params    SearchBookbeatParams
}

type SearchBookbeatResponseObject interface {
	VisitSearchBookbeatResponse(w http.ResponseWriter) error
}

type SearchBookbeat200JSONResponse struct{ N200JSONResponse }

func (response SearchBookbeat200JSONResponse) VisitSearchBookbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchBookbeat400JSONResponse struct{ N400JSONResponse }

func (response SearchBookbeat400JSONResponse) VisitSearchBookbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchBookbeat401JSONResponse struct{ N401JSONResponse }

func (response SearchBookbeat401JSONResponse) VisitSearchBookbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SearchBookbeat500JSONResponse struct{ N500JSONResponse }

func (response SearchBookbeat500JSONResponse) VisitSearchBookbeatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SearchGoodreadsRequestObject struct {
	Params SearchGoodreadsParams
}

type SearchGoodreadsResponseObject interface {
	VisitSearchGoodreadsResponse(w http.ResponseWriter) error
}

type SearchGoodreads200JSONResponse struct{ N200JSONResponse }

func (response SearchGoodreads200JSONResponse) VisitSearchGoodreadsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchGoodreads400JSONResponse struct{ N400JSONResponse }

func (response SearchGoodreads400JSONResponse) VisitSearchGoodreadsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchGoodreads401JSONResponse struct{ N401JSONResponse }

func (response SearchGoodreads401JSONResponse) VisitSearchGoodreadsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SearchGoodreads500JSONResponse struct{ N500JSONResponse }

func (response SearchGoodreads500JSONResponse) VisitSearchGoodreadsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SearchKindleRequestObject struct {
	Region SearchKindleParamsRegion `json:"region,omitempty"`
	Params SearchKindleParams
}

type SearchKindleResponseObject interface {
	VisitSearchKindleResponse(w http.ResponseWriter) error
}

type SearchKindle200JSONResponse struct{ N200JSONResponse }

func (response SearchKindle200JSONResponse) VisitSearchKindleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchKindle400JSONResponse struct{ N400JSONResponse }

func (response SearchKindle400JSONResponse) VisitSearchKindleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchKindle401JSONResponse struct{ N401JSONResponse }

func (response SearchKindle401JSONResponse) VisitSearchKindleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SearchKindle500JSONResponse struct{ N500JSONResponse }

func (response SearchKindle500JSONResponse) VisitSearchKindleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Search for books by format and languages using bookbeat
	// (GET /bookbeat/{market}/{format}/{languages}/search)
	SearchBookbeat(ctx context.Context, request SearchBookbeatRequestObject) (SearchBookbeatResponseObject, error)
	// Search for books using goodreads
	// (GET /goodreads/search)
	SearchGoodreads(ctx context.Context, request SearchGoodreadsRequestObject) (SearchGoodreadsResponseObject, error)
	// Search for books using kindle
	// (GET /kindle/{region}/search)
	SearchKindle(ctx context.Context, request SearchKindleRequestObject) (SearchKindleResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// SearchBookbeat operation middleware
func (sh *strictHandler) SearchBookbeat(w http.ResponseWriter, r *http.Request, market BookbeatMarket, format BookbeatFormat, languages BookbeatLanguageCodes, params SearchBookbeatParams) {
	var request SearchBookbeatRequestObject

	request.Market = market
	request.Format = format
	request.Languages = languages
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchBookbeat(ctx, request.(SearchBookbeatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchBookbeat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchBookbeatResponseObject); ok {
		if err := validResponse.VisitSearchBookbeatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchGoodreads operation middleware
func (sh *strictHandler) SearchGoodreads(w http.ResponseWriter, r *http.Request, params SearchGoodreadsParams) {
	var request SearchGoodreadsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchGoodreads(ctx, request.(SearchGoodreadsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchGoodreads")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchGoodreadsResponseObject); ok {
		if err := validResponse.VisitSearchGoodreadsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchKindle operation middleware
func (sh *strictHandler) SearchKindle(w http.ResponseWriter, r *http.Request, region SearchKindleParamsRegion, params SearchKindleParams) {
	var request SearchKindleRequestObject

	request.Region = region
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchKindle(ctx, request.(SearchKindleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchKindle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchKindleResponseObject); ok {
		if err := validResponse.VisitSearchKindleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXW5PTNhT+KxqVmWY7bpwt9CVvsKXtDlA6LDy07LajWCe2iCwZXUJD7P/eOZId5+Jk",
	"l90HXnhJbJ377dPxmma6rLQC5SydrmnFDCvBgQlvzLtCG3wSik7pRw9mRROqWAl02lETarMCSoZsblUh",
	"xTojVE6bJmlljmjoXg189MIAp1NnPJxS2CCzrbSyEDz8aTLBv0wrB8oFn6tKiow5oVX6wWqFZ72+yugK",
	"jBNRumQuK+KjcFCGh0cG5nRKv0v7xKRR3qbPtF68Asc4c4w2SecdM4atQrTtgZ59gMxFdznYzIgK/aFT",
	"+voFyj15kNdgTCzKYbZvtf+McfIGPnqwLjpy/pUceadi+4jPwNGTn79aSi6VA6OYJFdglmDI86DrULBr",
	"y2BwpxMO3GFWBHfn2pTMYYfgQbLvXbI1YAekTC8hUPby9uYlcZq4AkjgIKJkOQzp3pEbMMC9YR1x18Yv",
	"LYUIRSxkWnFLkz4YoVxvTygHORhUmIMye8N0YHR3YhIq7Gw3U+FgIBrJVO4x0iGtCvW5I4ms/EwKWwD/",
	"C9hpjmGqBSO+ACOuAvtxlEio9TMnnBwOxbH8C1N4TFezjavvW7abg75OQi/PgLlf2xrstwPSSSwQQWGi",
	"DWFStkfYGqB8iTaY50LPtF7gWfvPpNyy2ofRWX3ZFvZC85jlXePPhSvAkGvUc03RZrDdtYNN0JtMlyX7",
	"0QLeXg44kcI6oudkyaTgG16SBRMJhf9YWWHOKKiEQzLHca+YQxygU/rPiElZj0DVHGpmavB1xurM1pzV",
	"Stbg6rmo56YufC1crWa1UnUl68rVxtdga7usnTkbJQ/VcPbD2SN6InOvmFnAQL3iOcm0V86sQtRbNcox",
	"WCVpQmd4HGIPWSk8TajA0TaaJjQrsHj46rGMHH8sSiikVqgg6K2QRQZZfC3xNcNLfS7QRo7UwLJEQ8hS",
	"hJ0BqdlnfFoM9sfeHB1grMVbTGVwy8yeHoqW72YQ7SHzRrjVFQ52i+uV+HcB/TpTAONg+n3m6bu3v79+",
	"c/n307eXr//oS8cq8QJW8e4Raq5RXooMlA3et8KvLt9iso1Exc5VdpqmugJltTcZjLXJ01bIpsjbjz69",
	"8NbpknTJIn8avRTRsyUYG9tiMj4fT1AKlbJK0Cl9PJ6MJ7H3ixBgOmt7K12XoYuadB3HvEnXm5lrUgvM",
	"ZAVK5EMdeBXIYVhRoSXeCpWTTjmZC+nAACezVQcsTPWDit2IpQ6X0CXfKOwaP3jc76nv981fbHU+wgBe",
	"ljEcvDq9BTLigqvv0RHFCVOr1k0pSuGiW5E/ITPvyCfhCu0dES6oCsjWxkA+aS+Dqk/aLM5wCtADTGjf",
	"FlHXzqJ825a5Nd9Nk5xC5NEGdJPoWdLi8xFn2pv21NJ9F+fay2LAuYsjYLwLw+hkB+ojGOfjhFxv4Pia",
	"bpHPjiH2QHDbHfSw+HavpRDmkFjfh2n8mLkDY7v0NTfD3zJD0hu+FJn6L4jTvE863vO78J5vreGneZEp",
	"IKQvS4Zfd4cDf2Sw94AgaElzrbkBxu09YWUjfwQ2ftui7+HGt5LevaT7yQ61WwjFJaRrA7nQ6r4XQ9Ry",
	"pHwvOuJe7QbGP3qxA7T9aor7Buu2loAQHYq0a8+Hqlt2vB1YSb5BwH36pS1ts71RhfJtdqn3N5gGGz6+",
	"h27zlzpjcnC3ibuSRHqhrZs+nqBXN83/AQAA//8Hjlcq1RIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
